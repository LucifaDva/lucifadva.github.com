---
layout:     post
title:      "「PHP」迭代生成器与协程"
subtitle:   "探索yelid"
date:       2017-04-11 12:00:00
author:     "Lucifadiva"
header-img: "img/post-bg-apple-event-2015.jpg"
tags:
    - Learn
---

> 


<div>
<h3>一、yield基础——迭代器</h3>
<p>经典例子：</p>
<p><?php</p>
<p>function xrange($start, $end, $step = 1) {</p>
<p>    for ($i = $start; $i <= $end; $i += $step) {</p>
<p>        yield $i;</p>
<p>    }</p>
<p>}</p></p>
<p></p>
<p>foreach (xrange(1, 1000000) as $num) {</p>
<p>    echo $num, "\n";</p>
<p>}</p>

<p>range(1,10)返回的是一个array(1,2,…,10)的数组，xrange(1,10)依次返回这些值的迭代器，直接打印xrange发现返回的是object(Generator)#1 (0) {}，这个类就是生成迭代器，而这个迭代器实现了Iterator接口，试着打印了一下类的方法：</p>
<p>Array</p>
<p>(</p>
<p>    [0] => rewind</p>
<p>    [1] => valid</p>
<p>    [2] => current</p>
<p>    [3] => key</p>
<p>    [4] => next</p>
<p>    [5] => send</p>
<p>    [6] => throw</p>
<p>    [7] => getReturn</p>
<p>    [8] => __wakeup</p>
<p>)</p>
<p>如果范围设的很大，range()方法就会出错：PHP Warning:  range(): The supplied range exceeds the maximum array size: start=1 end=1000000000000</p>
<p>而xrange()方法的优点是显而易见的.它可以让你在处理大数据集合的时候不用一次性的加载到内存中.甚至你可以处理无限大的数据流。</p>
调用迭代器的方法一次, 其中的代码运行一次.例如, 如果你调用$range->rewind(), 那么xrange()里的代码就会运行到控制流第一次出现yield的地方. 而函数内传递给yield语句的返回值可以通过$range->current()获取.</p>

<p>为了继续执行生成器中yield后的代码, 你就需要调用$range->next()方法. 这将再次启动生成器, 直到下一次yield语句出现. 因此,连续调用next()和current()方法, 你就能从生成器里获得所有的值, 直到再没有yield语句出现.</p>

<p>对xrange()来说, 这种情形出现在$i超过$end时. 在这中情况下, 控制流将到达函数的终点,因此将不执行任何代码.一旦这种情况发生,vaild()方法将返回假, 这时迭代结束.</p>
<h3>二、协程——send</h3>
<p>经典例子——双向：</p>
<p><?php</p>
<p>function gen() {</p>
<p>    $ret = (yield 'yield1');</p>
<p>    var_dump($ret);</p>
<p>    $ret = (yield 'yield2');</p>
<p>    var_dump($ret);</p>
<p>}</p>
<p> </p>
<p>$gen = gen();</p>
<p>var_dump($gen->current());    // string(6) "yield1"</p>
<p>var_dump($gen->send('ret1')); // string(4) "ret1"   (the first var_dump in gen)</p>
<p>                             // string(6) "yield2" (the var_dump of the ->send() return value)</p>
<p>var_dump($gen->send('ret2')); // string(4) "ret2"   (again from within gen)</p>
<p>                              // NULL               (the return value of ->send())</p>
<p>?></p>
<p>使用协程实现多任务协作，如果是单CPU涉及到处理器再不同人吾之间进行切换问题。它要求当前正在运行的任务自动把控制传回给调度器,这样就可以运行其他任务了. 这与“抢占”多任务相反, 抢占多任务是这样的：调度器可以中断运行了一段时间的任务, 不管它喜欢还是不喜欢. 协作多任务在Windows的早期版本(windows95)和Mac OS中有使用, 不过它们后来都切换到使用抢先多任务了. 理由相当明确：如果你依靠程序自动交出控制的话, 那么一些恶意的程序将很容易占用整个CPU, 不与其他任务共享.</p>
<p>yield指令提供了任务中断自身的一种方法，把控制权交回给任务调度器。yield还可以用来在任务和调度器之间进行通信。</p>

</div>




